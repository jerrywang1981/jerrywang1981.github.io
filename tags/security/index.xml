<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on 村边的池塘</title>
    <link>https://jerrywang1981.github.io/tags/security/</link>
    <description>Recent content in security on 村边的池塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 27 Feb 2023 09:15:23 +0800</lastBuildDate><atom:link href="https://jerrywang1981.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cookie With Insecure or Improper or Missing SameSite Attribute</title>
      <link>https://jerrywang1981.github.io/post/security/Cookie-with-Insecure-or-Improper-or-Missing-SameSite-attribute/</link>
      <pubDate>Mon, 27 Feb 2023 09:15:23 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/security/Cookie-with-Insecure-or-Improper-or-Missing-SameSite-attribute/</guid>
      <description>Issue Cookie with Insecure or Improper or Missing SameSite attribute
Risk Prevent cookie information leakage by restricting cookies to first-party or same-site context, Attacks can extend to Cross-Site- Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).
Cause Sensitive Cookie with Improper or Insecure or Missing SameSite Attribute
Fix Review possible solutions for configuring SameSite Cookie attribute to recommended values
for K8s, you may edit the ingress configuration, set samesite value
nginx.ingress.kubernetes.io/session-cookie-samesite: &amp;#34;Strict&amp;#34; </description>
    </item>
    
    <item>
      <title>Blind Sql Injection</title>
      <link>https://jerrywang1981.github.io/post/node/blind-sql-injection/</link>
      <pubDate>Wed, 16 Nov 2022 09:29:06 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/node/blind-sql-injection/</guid>
      <description>Security Risk: It is possible to view, modify or delete database entries and tables
Cause: Sanitation of hazardous characters was not performed correctly on user input
Fix: Review possible solutions for hazardous character injection
Reasoning: The test result seems to indicate a vulnerability because it shows that values can be appended to parameter values, indicating that they were embedded in an SQL query. In this test, three (or sometimes four) requests are sent. The last is logically equal to the original, and the next-to-last is different. Any others are for control purposes. A comparison of the last two responses with the first (the last is similar to it, and the next-to-last is different) indicates that the application is vulnerable.
How to fix https://sequelize.org/v5/manual/raw-queries.html
make sure to &amp;lsquo;replace&amp;rsquo;/&amp;lsquo;bind&amp;rsquo;</description>
    </item>
    
  </channel>
</rss>
