<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 村边的池塘</title>
    <link>https://jerrywang1981.github.io/tags/python/</link>
    <description>Recent content in python on 村边的池塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 04 May 2020 00:11:12 +0800</lastBuildDate>
    
	<atom:link href="https://jerrywang1981.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 中通过gRPC调用Python实现的功能</title>
      <link>https://jerrywang1981.github.io/post/go/python-go-rpc/</link>
      <pubDate>Mon, 04 May 2020 00:11:12 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/go/python-go-rpc/</guid>
      <description>背景 有时候，我们在python中实现了一个功能，这功能如果用golang重新写呢，会比较麻烦，如果要在golang中调用python中的功能。 方式有很多，主要就是两个程序如果沟通的问题，那方式就各种各样了，可以通过http协议，json/xml等格式，或者tcp, 当然还有个 选择就</description>
    </item>
    
    <item>
      <title>Class Object Method</title>
      <link>https://jerrywang1981.github.io/post/python/class-object-method/</link>
      <pubDate>Sat, 02 May 2020 21:59:33 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/python/class-object-method/</guid>
      <description>对象中通过类或者实例的方法调用方式的不同 如果通过类中取得的方法，需要传入实例 class A(object): def test(self, *args): print(*args) if __name__ == &#39;__main__&#39;: a = A() a.test(7, 8, 9) # method from class object m1 = A.test m1(a, 7, 8, 9, 10) # method from instance object m2 = a.test m2(7, 8, 9, 10) 也就是说, 实例方法的第一个参数是实例本身，如果写decorator的时候，要特别注意 比如print_args这个decor</description>
    </item>
    
    <item>
      <title>05 Python Dictionary</title>
      <link>https://jerrywang1981.github.io/post/python/05-Python-Dictionary/</link>
      <pubDate>Sat, 25 Apr 2020 18:35:30 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/python/05-Python-Dictionary/</guid>
      <description>Dictionary ###创建方式 a = dict() a = {} a = {&#39;a&#39;: 1, &#39;b&#39;: 2} a = dict(a=1,b=2) a = [(&#39;a&#39;, 1), (&#39;b&#39;, 2)] b = dict(a) a = zip(&#39;abc&#39;, [1,2,3]) a = { x:x*2 for x in range(10) } a = dict.fromkeys(range(3), &#39;y&#39;)</description>
    </item>
    
    <item>
      <title>04 Python Tuple</title>
      <link>https://jerrywang1981.github.io/post/python/04-python-tuple/</link>
      <pubDate>Fri, 24 Apr 2020 21:54:58 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/python/04-python-tuple/</guid>
      <description>Tuple Python 的元组与列表类似，不同之处在于元组的元素不能修改。 不可变 空元组, 一个元素元组 元组运算 元组在参数中的应用 创建tuple的方式</description>
    </item>
    
    <item>
      <title>03 Python List</title>
      <link>https://jerrywang1981.github.io/post/python/03-python-list/</link>
      <pubDate>Fri, 24 Apr 2020 21:05:59 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/python/03-python-list/</guid>
      <description>列表 序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推 索引访问 长度 空或者False 创建列表的方式 a = [] a = [1,2,3] a = list() a = list(&#39;abcdefg&#39;) a = list(range(10)) a = [ x for x in range(20) ] append In [17]: a=[1,2,3] In [18]: a.append(4) In [19]: a Out[19]: [1, 2, 3, 4] In [20]: extend In [21]: a Out[21]: [1, 2, 3, 4] In [22]: a.extend([5,6])</description>
    </item>
    
    <item>
      <title>02 Python Variable</title>
      <link>https://jerrywang1981.github.io/post/python/02-python-variable/</link>
      <pubDate>Thu, 23 Apr 2020 14:23:52 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/python/02-python-variable/</guid>
      <description>变量 命名 变量名必须是大小写英文、数字和_的组合，且不能用数字开头 允许的变量名：a, a1, B_5, ____5, _C 静态语言，动态语言 大小写敏感 Dunder 规范 snake_case e.g. a_b, total_count 变量 函数名 模块 包 CamelCase e.g. Person, TeamMember 类名 常量 一般用大写, PI=3.14</description>
    </item>
    
    <item>
      <title>01 Python Data Type</title>
      <link>https://jerrywang1981.github.io/post/python/01-python-data-type/</link>
      <pubDate>Thu, 23 Apr 2020 13:51:39 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/python/01-python-data-type/</guid>
      <description>基本数据类型 整数 int 十进制： -1, 0, 1000, -8000, 88 八进制：0o10, 0o27 十六进制：0x10, 0xff 数学运算 + - * / // % 浮点数 float 比如：1.23, 2.6e3 字符串 str 字符串是以单引号&#39;或双引号&amp;quot;括起来的任意文本 如果字符串内部包含&amp;rsquo;,&amp;quot;, 可以用转义字符\来标识 转义 \ 不转义 &amp;lsquo;&amp;lsquo;&amp;lsquo;text&amp;rsquo;&#39;&#39;, &amp;ldquo;&amp;ldquo;&amp;ldquo;text&amp;rdquo;&amp;quot;&amp;quot;, r&#39;text\n&amp;rsquo; 布尔值</description>
    </item>
    
    <item>
      <title>Python Nest</title>
      <link>https://jerrywang1981.github.io/post/python/python-nest/</link>
      <pubDate>Sat, 11 Apr 2020 21:15:14 +0800</pubDate>
      
      <guid>https://jerrywang1981.github.io/post/python/python-nest/</guid>
      <description>背景 最近有做一个nestjs的项目，用的nestjs实现的微服务，如果所有的功能都用node/nestjs写，那倒也没有什么问题了。可是有一个功能是需要用到机器学习，代码是用python写的，需要用python实现一个微服务，供nest app来调用，同时，python代码也需要调</description>
    </item>
    
  </channel>
</rss>